tosca_definitions_version: tosca_simple_yaml_1_0

node_types:
  sdl.nodes.Invariant:
    derived_from: tosca.nodes.Root
    properties:
      behavior:
        type: map
        entry_schema:
          type: string
        required: no
        default: 
          #bug1: "+ Masquerade('a', 'b')"
          #bug2: "- Masquerade('a', 'b')"
          #bug3: "+ Forward('a', 'b', 0, 'd', 0)"
          #bug4: "- Forward('a', 'b', 0, 'd', 0)"
          hasAccount: hasAccount(A,H,U) <= hasUser(U,H,P,R) & knows(A,U) & knows(A,P)
          existsRoute1: existsRoute(N, M, N) <= isConnected(N, M)
          existsRoute2: existsRoute(N, M, R) <= isRouter(R) & isConnected(N, X) & isConnected(R, X) & hasDefaultGateway(N, R) & existsRoute(R, M, Y)
          existsRoute3: existsRoute(N, M, R) <= isRouter(R) & isConnected(N, X) & isConnected(R, X) & hasRoute(N, M, R) & existsRoute(R, M, Y)
          canConnect1: canConnect(N, M) <= isConnected(M, X) & existsRoute(N, X, P) & isConnected(N, Y) & existsRoute(M, Y, R)
          canConnect2: canConnect(N, M) <= isConnected(R, Y) & existsRoute(N, Y, Q) & isRouter(R) & Masquerade(N, R) & canConnect(R, M)
          canConnect3: canConnect(N, M) <= isConnected(N, X) & isConnected(R, Y) & existsRoute(N, Y, Q) & isRouter(R) & Masquerade(X, R) & canConnect(R, M)
          hostACL1: hostACL(N, M, P, Q) <= canConnect(N, M) & listeningOn(M, P, Q)
          #hostACL2: hostACL(N, M, P, Q) <= canConnect(N, R) & isRouter(R) & Forward(R, M, P, Q, Y) & canConnect(R, M) & listeningOn(M, P, Q)
      runtime:
        type: map
        entry_schema:
          type: string
        required: no
        default:
          hostACL1: "!include hostacl-linux.yaml"
          hostACL2: "!include hostacl-linux.yaml"
          existsRoute1: "!include existsroute-linux.yaml"
          existsRoute2: "!include existsroute-linux.yaml"
          existsRoute3: "!include existsroute-linux.yaml"

topology_template:    
  node_templates:    
    invariant:
      type: sdl.nodes.Invariant
